{"ast":null,"code":"import _defineProperty from \"/Users/andrecampbell/Desktop/MaxBone/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/andrecampbell/Desktop/MaxBone/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/andrecampbell/Desktop/MaxBone/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/andrecampbell/Desktop/MaxBone/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/andrecampbell/Desktop/MaxBone/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/andrecampbell/Desktop/MaxBone/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/andrecampbell/Desktop/MaxBone/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/andrecampbell/Desktop/MaxBone/client/src/components/Quizzes/IconQuiz/IconQuiz.js\";\nimport React, { Component } from 'react';\nimport update from 'react-addons-update';\nimport quizQuestions from './api/quizQuestions';\nimport Quiz from './components/Quiz';\nimport Result from './components/Result';\nimport './iconq.css';\n\nvar IconQuiz =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(IconQuiz, _Component);\n\n  function IconQuiz(props) {\n    var _this;\n\n    _classCallCheck(this, IconQuiz);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(IconQuiz).call(this, props));\n    _this.state = {\n      counter: 0,\n      questionId: 1,\n      question: '',\n      answerOptions: [],\n      answer: '',\n      answersCount: {\n        Sedgwick: 0,\n        Joplin: 0,\n        Hepburn: 0,\n        Monroe: 0\n      },\n      result: ''\n    };\n    _this.handleAnswerSelected = _this.handleAnswerSelected.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(IconQuiz, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      var shuffledAnswerOptions = quizQuestions.map(function (question) {\n        return _this2.shuffleArray(question.answers);\n      });\n      this.setState({\n        question: quizQuestions[0].question,\n        answerOptions: shuffledAnswerOptions[0]\n      });\n    }\n  }, {\n    key: \"shuffleArray\",\n    value: function shuffleArray(array) {\n      var currentIndex = array.length,\n          temporaryValue,\n          randomIndex; // While there remain elements to shuffle...\n\n      while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1; // And swap it with the current element.\n\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n\n      return array;\n    }\n  }, {\n    key: \"handleAnswerSelected\",\n    value: function handleAnswerSelected(event) {\n      var _this3 = this;\n\n      this.setUserAnswer(event.currentTarget.value);\n\n      if (this.state.questionId < quizQuestions.length) {\n        setTimeout(function () {\n          return _this3.setNextQuestion();\n        }, 300);\n      } else {\n        setTimeout(function () {\n          return _this3.setResults(_this3.getResults());\n        }, 300);\n      }\n    }\n  }, {\n    key: \"setUserAnswer\",\n    value: function setUserAnswer(answer) {\n      var updatedAnswersCount = update(this.state.answersCount, _defineProperty({}, answer, {\n        $apply: function $apply(currentValue) {\n          return currentValue + 1;\n        }\n      }));\n      this.setState({\n        answersCount: updatedAnswersCount,\n        answer: answer\n      });\n    }\n  }, {\n    key: \"setNextQuestion\",\n    value: function setNextQuestion() {\n      var counter = this.state.counter + 1;\n      var questionId = this.state.questionId + 1;\n      this.setState({\n        counter: counter,\n        questionId: questionId,\n        question: quizQuestions[counter].question,\n        answerOptions: quizQuestions[counter].answers,\n        answer: ''\n      });\n    }\n  }, {\n    key: \"getResults\",\n    value: function getResults() {\n      var answersCount = this.state.answersCount;\n      var answersCountKeys = Object.keys(answersCount);\n      var answersCountValues = answersCountKeys.map(function (key) {\n        return answersCount[key];\n      });\n      var maxAnswerCount = Math.max.apply(null, answersCountValues);\n      return answersCountKeys.filter(function (key) {\n        return answersCount[key] === maxAnswerCount;\n      });\n    }\n  }, {\n    key: \"setResults\",\n    value: function setResults(result) {\n      if (result.length === 1) {\n        this.setState({\n          result: result[0]\n        });\n      } else {\n        this.setState({\n          result: 'Undetermined'\n        });\n      }\n    }\n  }, {\n    key: \"renderQuiz\",\n    value: function renderQuiz() {\n      return React.createElement(Quiz, {\n        answer: this.state.answer,\n        answerOptions: this.state.answerOptions,\n        questionId: this.state.questionId,\n        question: this.state.question,\n        questionTotal: quizQuestions.length,\n        onAnswerSelected: this.handleAnswerSelected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"renderResult\",\n    value: function renderResult() {\n      return React.createElement(Result, {\n        quizResult: this.state.result,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, this.state.result ? this.renderResult() : this.renderQuiz());\n    }\n  }]);\n\n  return IconQuiz;\n}(Component);\n\nexport default IconQuiz;","map":{"version":3,"sources":["/Users/andrecampbell/Desktop/MaxBone/client/src/components/Quizzes/IconQuiz/IconQuiz.js"],"names":["React","Component","update","quizQuestions","Quiz","Result","IconQuiz","props","state","counter","questionId","question","answerOptions","answer","answersCount","Sedgwick","Joplin","Hepburn","Monroe","result","handleAnswerSelected","bind","shuffledAnswerOptions","map","shuffleArray","answers","setState","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","event","setUserAnswer","currentTarget","value","setTimeout","setNextQuestion","setResults","getResults","updatedAnswersCount","$apply","currentValue","answersCountKeys","Object","keys","answersCountValues","key","maxAnswerCount","max","apply","filter","renderResult","renderQuiz"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport update from 'react-addons-update';\nimport quizQuestions from './api/quizQuestions';\nimport Quiz from './components/Quiz';\nimport Result from './components/Result';\nimport './iconq.css';\n \nclass IconQuiz extends Component {\n \n \n \n \n  constructor(props) {\n    super(props);\n \n    this.state = {\n      counter: 0,\n      questionId: 1,\n      question: '',\n      answerOptions: [],\n      answer: '',\n      answersCount: {\n        Sedgwick: 0,\n        Joplin: 0,\n        Hepburn: 0,\n        Monroe: 0,\n      },\n      result: ''\n    };\n \n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n  }\n \n  componentWillMount() {\n    const shuffledAnswerOptions = quizQuestions.map((question) => this.shuffleArray(question.answers));\n    this.setState({\n      question: quizQuestions[0].question,\n      answerOptions: shuffledAnswerOptions[0]\n    });\n  }\n \n  shuffleArray(array) {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n \n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n \n    return array;\n  };\n \n  handleAnswerSelected(event) {\n    this.setUserAnswer(event.currentTarget.value);\n \n    if (this.state.questionId < quizQuestions.length) {\n        setTimeout(() => this.setNextQuestion(), 300);\n    } else {\n        setTimeout(() => this.setResults(this.getResults()), 300);\n    }\n  }\n \n  setUserAnswer(answer) {\n    const updatedAnswersCount = update(this.state.answersCount, {\n      [answer]: {$apply: (currentValue) => currentValue + 1}\n    });\n \n    this.setState({\n        answersCount: updatedAnswersCount,\n        answer: answer\n    });\n  }\n \n  setNextQuestion() {\n    const counter = this.state.counter + 1;\n    const questionId = this.state.questionId + 1;\n \n    this.setState({\n        counter: counter,\n        questionId: questionId,\n        question: quizQuestions[counter].question,\n        answerOptions: quizQuestions[counter].answers,\n        answer: ''\n    });\n  }\n \n  getResults() {\n    const answersCount = this.state.answersCount;\n    const answersCountKeys = Object.keys(answersCount);\n    const answersCountValues = answersCountKeys.map((key) => answersCount[key]);\n    const maxAnswerCount = Math.max.apply(null, answersCountValues);\n \n    return answersCountKeys.filter((key) => answersCount[key] === maxAnswerCount);\n  }\n \n  setResults(result) {\n    if (result.length === 1) {\n      this.setState({ result: result[0] });\n    } else {\n      this.setState({ result: 'Undetermined' });\n    }\n  }\n \n  renderQuiz() {\n    return (\n      <Quiz\n        answer={this.state.answer}\n        answerOptions={this.state.answerOptions}\n        questionId={this.state.questionId}\n        question={this.state.question}\n        questionTotal={quizQuestions.length}\n        onAnswerSelected={this.handleAnswerSelected}\n      />\n    );\n  }\n\n  \n \n  renderResult() {\n    return (\n      <Result quizResult={this.state.result}/>\n     \n    );\n  }\n \n  render() {\n    return (\n      <div className=\"App\">\n        {/* <div className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" /> \n          <img src={got} className=\"App-img\" alt=\"img\" />\n          \n        </div> */}\n        {this.state.result ? this.renderResult() : this.renderQuiz()}\n      </div>\n    );\n \n \n \n \n  }\n \n}\n \nexport default IconQuiz;"]},"metadata":{},"sourceType":"module"}